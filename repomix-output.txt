This file is a merged representation of the entire codebase, combined into a single document by Repomix.

================================================================
File Summary
================================================================

Purpose:
--------
This file contains a packed representation of the entire repository's contents.
It is designed to be easily consumable by AI systems for analysis, code review,
or other automated processes.

File Format:
------------
The content is organized as follows:
1. This summary section
2. Repository information
3. Directory structure
4. Multiple file entries, each consisting of:
  a. A separator line (================)
  b. The file path (File: path/to/file)
  c. Another separator line
  d. The full contents of the file
  e. A blank line

Usage Guidelines:
-----------------
- This file should be treated as read-only. Any changes should be made to the
  original repository files, not this packed version.
- When processing this file, use the file path to distinguish
  between different files in the repository.
- Be aware that this file may contain sensitive information. Handle it with
  the same level of security as you would the original repository.

Notes:
------
- Some files may have been excluded based on .gitignore rules and Repomix's configuration
- Binary files are not included in this packed representation. Please refer to the Repository Structure section for a complete list of file paths, including binary files
- Files matching patterns in .gitignore are excluded
- Files matching default ignore patterns are excluded

Additional Info:
----------------

================================================================
Directory Structure
================================================================
css/
  pdf-styles.css
js/
  content.js
manifest.json

================================================================
Files
================================================================

================
File: css/pdf-styles.css
================
/* Styles applied to the PDF content */
.pdf-container {
  font-family: 'Arial', sans-serif;
  font-size: 12pt;
  line-height: 1.5;
  color: #000000 !important;
  background-color: #ffffff;
  padding: 30px;
  max-width: 800px;
  margin: 0 auto;
}

/* Force all text to be black */
.pdf-container h1, 
.pdf-container h2, 
.pdf-container h3, 
.pdf-container h4, 
.pdf-container p, 
.pdf-container li, 
.pdf-container td, 
.pdf-container th, 
.pdf-container span, 
.pdf-container div {
  color: #000000 !important;
  opacity: 1 !important;
}

/* Make headers extra bold and black */
.pdf-container h1 {
  font-size: 24pt;
  color: #000000 !important;
  font-weight: 900 !important;
  opacity: 1 !important;
  margin-top: 20px;
  margin-bottom: 15px;
  page-break-after: avoid;
}

.pdf-container h2 {
  font-size: 20pt;
  color: #000000 !important;
  font-weight: 800 !important;
  opacity: 1 !important;
  margin-top: 18px;
  margin-bottom: 12px;
  page-break-after: avoid;
}

.pdf-container h3 {
  font-size: 16pt;
  color: #000000 !important;
  font-weight: 700 !important;
  opacity: 1 !important;
  margin-top: 15px;
  margin-bottom: 10px;
  page-break-after: avoid;
}

.pdf-container p {
  margin-bottom: 10px;
  text-align: justify;
}

.pdf-container ul, .pdf-container ol {
  margin-left: 20px;
  margin-bottom: 15px;
}

.pdf-container li {
  margin-bottom: 5px;
}

.pdf-container a, .pdf-container .citation-link {
  color: #0055aa;
  text-decoration: underline;
  background-color: #f5f5f5;
  padding: 0 3px;
  border-radius: 2px;
}

.pdf-container div.citations, 
.pdf-container div[data-state="closed"],
.pdf-container .relative.inline-flex.items-center {
  background-color: #f5f5f5;
  padding: 5px;
  border-radius: 4px;
  margin: 2px 0;
}

.pdf-container a.ml-1.inline-flex {
  background-color: #eeeeee;
  color: #444444;
  padding: 2px 4px;
  border-radius: 3px;
  text-decoration: none;
  font-weight: 500;
}

.pdf-container blockquote {
  border-left: 4px solid #cccccc;
  padding-left: 15px;
  color: #333333;
  margin: 15px 0;
  background-color: #f9f9f9;
  padding: 10px 15px;
}

.pdf-container table {
  border-collapse: collapse;
  width: 100%;
  margin: 20px 0;
}

.pdf-container th, .pdf-container td {
  border: 1px solid #dddddd;
  padding: 8px;
  text-align: left;
}

.pdf-container th {
  background-color: #eeeeee;
  color: #222222;
  font-weight: bold;
}

.pdf-container tr:nth-child(even) {
  background-color: #f9f9f9;
}

.pdf-container code, .pdf-container pre {
  font-family: 'Consolas', 'Monaco', monospace;
  background-color: #f5f5f5;
  border: 1px solid #eeeeee;
  border-radius: 3px;
  padding: 2px 4px;
  font-size: 90%;
}

.pdf-container pre {
  padding: 10px;
  overflow-x: auto;
  margin: 15px 0;
}

/* Ensure citations are properly styled */
.pdf-container .citation-link {
  font-size: 9pt;
  vertical-align: super;
  color: #0066cc;
}

/* Ensure page breaks don't occur in the middle of essential elements only */
.pdf-container h1, 
.pdf-container h2, 
.pdf-container h3, 
.pdf-container table, 
.pdf-container figure {
  page-break-inside: avoid;
}

/* Remove these rules that cause too many breaks */
.pdf-container h4, 
.pdf-container li, 
.pdf-container figcaption {
  /* Removed page-break-inside: avoid; */
}

/* Remove the section page break rule */
.pdf-container section {
  /* Removed page-break-after: always; */
}

/* Add class for elements that should never break */
.pdf-container .no-break {
  page-break-inside: avoid;
}

/* Properly handle images */
.pdf-container img {
  max-width: 100%;
  height: auto;
}

================
File: js/content.js
================
/**
 * ChatGPT Research Report Exporter
 * A Chrome extension that adds a PDF export button to ChatGPT's research reports
 */

(function() {
  // Configuration
  const config = {
    debug: false, // Set to false for production
    exportButtonId: 'research-pdf-export-button',
    researchMarkerText: 'Research completed in',
    loadingIndicatorId: 'pdf-export-loading'
  };
  
  // Log helper - only logs when debug is true
  const log = (message) => {
    if (config.debug) console.log(`[PDF Exporter] ${message}`);
  };

  /**
   * Main initialization function
   */
  function init() {
    log('Initializing Research Report Exporter');
    // Set up the mutation observer to detect when research reports are loaded
    setupObserver();
    // Also check on load in case the report is already present
    checkForResearchReport();
  }

  /**
   * Sets up a mutation observer to detect when a research report appears
   */
  function setupObserver() {
    log('Setting up observer');
    const observer = new MutationObserver((mutations) => {
      const shouldCheck = mutations.some(mutation => {
        // Check for text nodes or elements that might contain our marker
        return Array.from(mutation.addedNodes).some(node => {
          return node.nodeType === Node.TEXT_NODE || 
                (node.nodeType === Node.ELEMENT_NODE && node.textContent.includes(config.researchMarkerText));
        });
      });
      
      if (shouldCheck) {
        checkForResearchReport();
      }
    });
    
    observer.observe(document.body, { 
      childList: true, 
      subtree: true, 
      characterData: true 
    });
  }
  
  /**
   * Checks if a research report is present on the page
   */
  function checkForResearchReport() {
    log('Checking for research report');
    // Look for the research marker text
    const hasResearchReport = document.body.textContent.includes(config.researchMarkerText);
    
    if (hasResearchReport) {
      log('Research report detected');
      
      // Check if button already exists anywhere on the page
      const existingButton = document.getElementById(config.exportButtonId);
      if (existingButton) {
        log('Export button already exists');
        return; // Don't add another button
      }
      
      // Find all containers where we might insert the button
      const containers = document.querySelectorAll('.flex.items-center');
      let buttonAdded = false;
      
      // Sort containers by proximity to the research marker
      const sortedContainers = Array.from(containers).filter(container => {
        // Check if this container is a toolbar (has button elements)
        const hasButtons = container.querySelectorAll('button').length > 0;
        
        // Check if we're in the right context (near a research marker)
        const isNearResearchMarker = container.textContent.includes(config.researchMarkerText) || 
                                   (container.closest('article') && 
                                    container.closest('article').textContent.includes(config.researchMarkerText));
        
        return hasButtons && isNearResearchMarker;
      });
      
      // Use only the first valid container (most specific to the research marker)
      if (sortedContainers.length > 0) {
        insertExportButton(sortedContainers[0]);
      }
    }
  }
  
  /**
   * Inserts the PDF export button into the UI
   */
  function insertExportButton(container) {
    log('Inserting export button');
    
    // Remove any existing export buttons
    const existingButtons = document.querySelectorAll(`#${config.exportButtonId}`);
    existingButtons.forEach(button => {
      const buttonContainer = button.closest('span[data-state]');
      if (buttonContainer) {
        buttonContainer.remove();
      } else {
        button.remove();
      }
    });
    
    // Create button element
    const buttonSpan = document.createElement('span');
    buttonSpan.className = '';
    buttonSpan.dataset.state = 'closed';
    
    // Create tooltip container
    const tooltipContainer = document.createElement('div');
    tooltipContainer.style.position = 'relative';
    
    // Create the actual tooltip
    const tooltip = document.createElement('div');
    tooltip.textContent = 'Export to PDF';
    tooltip.style.position = 'absolute';
    tooltip.style.top = '100%';
    tooltip.style.left = '50%';
    tooltip.style.transform = 'translateX(-50%)';
    tooltip.style.marginTop = '8px';
    tooltip.style.backgroundColor = '#000000';
    tooltip.style.color = '#ffffff';
    tooltip.style.padding = '8px 12px';
    tooltip.style.borderRadius = '6px';
    tooltip.style.fontSize = '14px';
    tooltip.style.fontWeight = '500';
    tooltip.style.whiteSpace = 'nowrap';
    tooltip.style.zIndex = '9999';
    tooltip.style.opacity = '0';
    tooltip.style.transition = 'opacity 0.1s ease-in-out';
    tooltip.style.pointerEvents = 'none';
    
    // Add an arrow to the tooltip
    const tooltipArrow = document.createElement('div');
    tooltipArrow.style.position = 'absolute';
    tooltipArrow.style.top = '-4px';
    tooltipArrow.style.left = '50%';
    tooltipArrow.style.transform = 'translateX(-50%) rotate(45deg)';
    tooltipArrow.style.width = '8px';
    tooltipArrow.style.height = '8px';
    tooltipArrow.style.backgroundColor = '#000000';
    
    tooltip.appendChild(tooltipArrow);
    tooltipContainer.appendChild(tooltip);
    
    const buttonElement = document.createElement('button');
    buttonElement.id = config.exportButtonId;
    buttonElement.className = 'rounded-lg text-token-text-secondary hover:bg-token-main-surface-secondary';
    buttonElement.setAttribute('aria-label', 'Export to PDF');
    
    // Create button content
    const buttonContent = document.createElement('span');
    buttonContent.className = 'flex h-[30px] w-[30px] items-center justify-center';
    
    // Create SVG icon for the button
    buttonContent.innerHTML = `
      <svg width="24" height="24" viewBox="0 0 24 24" fill="none" xmlns="http://www.w3.org/2000/svg" class="icon-md-heavy">
        <path fill-rule="evenodd" clip-rule="evenodd" d="M7 2a2 2 0 00-2 2v16a2 2 0 002 2h10a2 2 0 002-2V7.414A2 2 0 0018.414 6L14 1.586A2 2 0 0012.586 1H7zm0 2v16h10V8h-4V4H7zm9.586 1L14 3.414V6h2.586zM12 11a1 1 0 10-2 0v3H9a1 1 0 100 2h5a1 1 0 100-2h-1v-3a1 1 0 00-1-1z" fill="currentColor"></path>
      </svg>
    `;
    
    buttonElement.appendChild(buttonContent);
    
    // Add event listeners for tooltip
    buttonElement.addEventListener('mouseenter', () => {
      tooltip.style.opacity = '1';
    });
    
    buttonElement.addEventListener('mouseleave', () => {
      tooltip.style.opacity = '0';
    });
    
    // Add click event listener for PDF generation
    buttonElement.addEventListener('click', handleExportButtonClick);
    
    // Add elements to container
    tooltipContainer.appendChild(buttonElement);
    buttonSpan.appendChild(tooltipContainer);
    
    // Add the button to the container
    container.appendChild(buttonSpan);
    
    log('Export button inserted');
  }
  
  /**
   * Creates and shows a loading indicator
   */
  function showLoadingIndicator() {
    // Remove any existing indicator
    const existingIndicator = document.getElementById(config.loadingIndicatorId);
    if (existingIndicator) existingIndicator.remove();
    
    // Create loading indicator
    const indicator = document.createElement('div');
    indicator.id = config.loadingIndicatorId;
    indicator.style.position = 'fixed';
    indicator.style.top = '20px';
    indicator.style.left = '50%';
    indicator.style.transform = 'translateX(-50%)';
    indicator.style.padding = '10px 20px';
    indicator.style.backgroundColor = 'rgba(0, 0, 0, 0.7)';
    indicator.style.color = 'white';
    indicator.style.borderRadius = '5px';
    indicator.style.zIndex = '9999';
    indicator.style.boxShadow = '0 2px 10px rgba(0, 0, 0, 0.2)';
    indicator.innerHTML = `
      <div style="display: flex; align-items: center; gap: 10px;">
        <svg width="24" height="24" viewBox="0 0 24 24" xmlns="http://www.w3.org/2000/svg" style="animation: spin 1s linear infinite;">
          <style>
            @keyframes spin {
              0% { transform: rotate(0deg); }
              100% { transform: rotate(360deg); }
            }
          </style>
          <circle cx="12" cy="12" r="10" stroke="white" stroke-width="4" fill="none" stroke-dasharray="30 10" />
        </svg>
        <span>Generating PDF...</span>
      </div>
    `;
    
    document.body.appendChild(indicator);
  }
  
  /**
   * Removes the loading indicator
   */
  function hideLoadingIndicator() {
    const indicator = document.getElementById(config.loadingIndicatorId);
    if (indicator) indicator.remove();
  }
  
  /**
   * Handle the export button click
   */
  function handleExportButtonClick() {
    log('Export button clicked');
    
    // Show loading indicator
    showLoadingIndicator();
    
    // Extract the research content
    const content = extractResearchContent();
    
    if (!content) {
      log('No content found to export');
      hideLoadingIndicator();
      alert('Could not find research content to export. Please make sure the research report is fully loaded.');
      return;
    }
    
    // Generate PDF from the content
    generatePDF(content);
  }
  
  /**
   * Extracts the research report content from the page
   */
  function extractResearchContent() {
    log('Extracting research content');
    
    // Find the research marker
    const researchMarkers = Array.from(document.querySelectorAll('button'))
      .filter(el => el.textContent.includes(config.researchMarkerText));
    
    if (researchMarkers.length === 0) {
      log('Research marker not found');
      return null;
    }
    
    // Get the article element
    const articleElement = researchMarkers[0].closest('article');
    
    if (!articleElement) {
      log('Article element not found');
      return null;
    }
    
    // Find the research content - try multiple selectors to be more robust
    let researchContent = articleElement.querySelector('.deep-research-result');
    
    // If the primary selector fails, try alternative selectors
    if (!researchContent) {
      // Try to find content after the "Research completed" text
      const completedTextDiv = Array.from(articleElement.querySelectorAll('div'))
        .find(div => div.textContent.includes(config.researchMarkerText));
      
      if (completedTextDiv) {
        // Get the parent of the text, then the next sibling which should contain the content
        const parentElement = completedTextDiv.closest('.border-token-border-primary');
        if (parentElement && parentElement.nextElementSibling) {
          researchContent = parentElement.nextElementSibling;
        }
      }
      
      // If still not found, try to get all message content after the marker
      if (!researchContent) {
        const allMessages = articleElement.querySelectorAll('[data-message-author-role="assistant"]');
        // Find the message after the one containing the "Research completed" text
        for (let i = 0; i < allMessages.length; i++) {
          if (allMessages[i].textContent.includes(config.researchMarkerText) && i + 1 < allMessages.length) {
            researchContent = allMessages[i + 1];
            break;
          }
        }
      }
    }
    
    if (!researchContent) {
      log('Research content not found using any selector');
      return null;
    }
    
    // Clone the content so we don't modify the original
    return researchContent.cloneNode(true);
  }
  
  /**
   * Generates a PDF using the browser's print dialog
   */
  function generatePDF(content) {
    log('Generating PDF using browser print');
    
    // Create a clean, formatted container
    const container = createFormattedContainer(content);
    
    // Get the title for the document
    let documentTitle = 'ChatGPT Research Report';
    const firstH1 = content.querySelector('h1');
    if (firstH1) {
      documentTitle = firstH1.textContent.trim();
    }
    
    // Create a new window for printing
    const printWindow = window.open('', '_blank');
    
    // Add necessary styles for a clean print output
    printWindow.document.write(`
      <html>
        <head>
          <title>${documentTitle}</title>
          <style>
            /* Base styles */
            body {
              font-family: Arial, sans-serif;
              line-height: 1.5;
              color: #000000;
              margin: 40px;
              font-size: 12pt;
            }
            
            /* Heading styles */
            h1 {
              font-size: 24pt;
              color: #000000;
              font-weight: 900;
              margin-top: 20px;
              margin-bottom: 15px;
              page-break-after: avoid;
            }
            
            h2 {
              font-size: 20pt;
              color: #000000;
              font-weight: 800;
              margin-top: 18px;
              margin-bottom: 12px;
              page-break-after: avoid;
            }
            
            h3 {
              font-size: 16pt;
              color: #000000;
              font-weight: 700;
              margin-top: 15px;
              margin-bottom: 10px;
              page-break-after: avoid;
            }
            
            /* Paragraph and list styles */
            p {
              margin-bottom: 10px;
              text-align: justify;
            }
            
            ul, ol {
              margin-left: 20px;
              margin-bottom: 15px;
            }
            
            li {
              margin-bottom: 5px;
            }
            
            /* Link styles */
            a {
              color: #0055aa;
              text-decoration: underline;
            }
            
            /* Citation styles - make them look like badges with proper spacing */
            .citation-item, .simplified-citation, sup, .citation-link, .citation-badge {
              display: inline-block !important;
              color: #0055aa !important;
              background-color: #f2f7ff !important;
              border: 1px solid #d0e3ff !important;
              border-radius: 4px !important;
              font-size: 0.8em !important;
              padding: 0px 4px !important;
              margin: 0 2px !important;
              vertical-align: super !important;
              line-height: 1.2 !important;
              text-decoration: none !important;
              white-space: nowrap !important;
              font-weight: normal !important;
            }
            
            /* Override any display property that might cause new lines */
            .relative.inline-flex.items-center,
            .inline-flex,
            [data-citation-target] {
              display: inline !important;
              white-space: nowrap !important;
              margin-left: 3px !important;
            }
            
            /* Table styles */
            table {
              border-collapse: collapse;
              width: 100%;
              margin: 20px 0;
              page-break-inside: avoid;
            }
            
            th, td {
              border: 1px solid #dddddd;
              padding: 8px;
              text-align: left;
            }
            
            th {
              background-color: #eeeeee;
              color: #000000;
              font-weight: bold;
            }
            
            tr:nth-child(even) {
              background-color: #f9f9f9;
            }
            
            /* Code styles */
            code, pre {
              font-family: 'Consolas', 'Monaco', monospace;
              background-color: #f5f5f5;
              border: 1px solid #eeeeee;
              border-radius: 3px;
              padding: 2px 4px;
              font-size: 90%;
            }
            
            pre {
              padding: 10px;
              overflow-x: auto;
              margin: 15px 0;
              white-space: pre-wrap;
            }
            
            /* Page break control */
            .page-break {
              page-break-after: always;
            }
            
            /* Print-specific styles */
            @media print {
              body {
                margin: 0;
                padding: 15mm;
              }
              
              a {
                color: #000000;
              }
              
              h1, h2, h3, h4, table, figure, img {
                page-break-inside: avoid;
              }
            }
            
            /* Additional elements */
            blockquote {
              border-left: 4px solid #cccccc;
              padding: 10px 15px;
              margin: 15px 0;
              background-color: #f9f9f9;
            }
            
            img {
              max-width: 100%;
              height: auto;
            }
          </style>
        </head>
        <body>
          <div class="date-generated">Generated on ${new Date().toLocaleDateString()}</div>
          <div id="research-content"></div>
        </body>
      </html>
    `);
    
    // Close the document to stop writing
    printWindow.document.close();
    
    // Wait for the document to load, then inject the formatted content
    printWindow.onload = function() {
      // Get the container where we'll put the content
      const contentDiv = printWindow.document.getElementById('research-content');
      if (contentDiv) {
        // Add the content to the print window
        contentDiv.appendChild(container.cloneNode(true));
        
        // Wait a moment for rendering
        setTimeout(() => {
          // Show the print dialog
          printWindow.print();
          
          // Hide the loading indicator after printing dialog is shown
          hideLoadingIndicator();
        }, 500);
      } else {
        printWindow.close();
        hideLoadingIndicator();
        alert('Error preparing content for printing.');
      }
    };
  }
  
  /**
   * Creates a formatted container for the PDF content
   */
  function createFormattedContainer(content) {
    log('Creating formatted container');
    
    // Create a container for the content
    const container = document.createElement('div');
    container.className = 'pdf-container';
    
    // Clone the content to avoid modifying the original
    const clonedContent = content.cloneNode(true);
    
    // Fix citations with badge styling and proper spacing
    fixCitationElements(clonedContent);
    
    // Remove unnecessary elements
    const unnecessaryElements = clonedContent.querySelectorAll('.citation-actions, .cite-expanded');
    unnecessaryElements.forEach(el => {
      el.remove();
    });
    
    // Force direct styling on elements to ensure they print properly
    styleContentForPrinting(clonedContent);
    
    // Add the content to the container
    container.appendChild(clonedContent);
    
    return container;
  }
  
  /**
   * Fix citation elements to ensure they stay inline with proper spacing
   */
  function fixCitationElements(element) {
    // Get all possible citation elements with a more comprehensive selector
    const citations = element.querySelectorAll(
      '.relative.inline-flex.items-center, [data-citation-target], .citation-item, .citation-link, sup, [role="button"][data-testid*="citation"], .simplified-citation, .citation-badge, [data-testid*="citation-wrapper"]'
    );
    
    citations.forEach(citation => {
      // Ensure there's proper spacing before the citation
      if (citation.previousSibling && citation.previousSibling.nodeType === Node.TEXT_NODE) {
        const textContent = citation.previousSibling.textContent;
        if (textContent && !textContent.endsWith(' ')) {
          citation.previousSibling.textContent = textContent + ' ';
        }
      }
      
      // Make the citation display inline with text
      citation.style.display = 'inline';
      citation.style.whiteSpace = 'nowrap';
      
      // Find the actual citation number/text
      let citationText = citation.textContent.trim();
      // Clean up any extra characters that might be in the citation
      citationText = citationText.replace(/[\[\](){}]/g, '').trim();
      
      // Create a new badge-style element
      const badgeSpan = document.createElement('span');
      badgeSpan.className = 'citation-badge';
      badgeSpan.textContent = citationText;
      
      // Apply direct styling to make it look like a badge
      badgeSpan.style.display = 'inline-block';
      badgeSpan.style.color = '#0055aa';
      badgeSpan.style.backgroundColor = '#f2f7ff';
      badgeSpan.style.border = '1px solid #d0e3ff';
      badgeSpan.style.borderRadius = '4px';
      badgeSpan.style.padding = '0px 4px';
      badgeSpan.style.margin = '0 2px';
      badgeSpan.style.fontSize = '0.8em';
      badgeSpan.style.verticalAlign = 'super';
      badgeSpan.style.lineHeight = '1.2';
      badgeSpan.style.whiteSpace = 'nowrap';
      badgeSpan.style.textDecoration = 'none';
      badgeSpan.style.fontWeight = 'normal';
      
      // Handle specific citation types
      if (citation.querySelector('button, [role="button"]')) {
        // If the citation contains a button, replace just the button
        const buttons = citation.querySelectorAll('button, [role="button"]');
        buttons.forEach(button => {
          button.parentNode.replaceChild(badgeSpan.cloneNode(true), button);
        });
      } else if (citation.tagName.toLowerCase() === 'sup' || 
                citation.classList.contains('citation-item') || 
                citation.classList.contains('simplified-citation')) {
        // For simple citation elements, replace the entire element
        if (citation.parentNode) {
          citation.parentNode.replaceChild(badgeSpan, citation);
        }
      } else {
        // For other containers, preserve the container but replace its content
        citation.innerHTML = '';
        citation.appendChild(badgeSpan);
      }
    });
    
    // Also handle any remaining numeric citations that might be in superscript
    const superscripts = element.querySelectorAll('sup');
    superscripts.forEach(sup => {
      // Check if this looks like a citation (just numbers)
      if (/^\d+$/.test(sup.textContent.trim())) {
        const badgeSpan = document.createElement('span');
        badgeSpan.className = 'citation-badge';
        badgeSpan.textContent = sup.textContent.trim();
        
        // Apply the same badge styling
        badgeSpan.style.display = 'inline-block';
        badgeSpan.style.color = '#0055aa';
        badgeSpan.style.backgroundColor = '#f2f7ff';
        badgeSpan.style.border = '1px solid #d0e3ff';
        badgeSpan.style.borderRadius = '4px';
        badgeSpan.style.padding = '0px 4px';
        badgeSpan.style.margin = '0 2px';
        badgeSpan.style.fontSize = '0.8em';
        badgeSpan.style.verticalAlign = 'super';
        badgeSpan.style.lineHeight = '1.2';
        badgeSpan.style.whiteSpace = 'nowrap';
        badgeSpan.style.textDecoration = 'none';
        badgeSpan.style.fontWeight = 'normal';
        
        sup.parentNode.replaceChild(badgeSpan, sup);
      }
    });
  }
  
  /**
   * Apply direct styling to content for better printing
   */
  function styleContentForPrinting(element) {
    // Apply styling to headings
    const headings = element.querySelectorAll('h1, h2, h3, h4, h5, h6');
    headings.forEach(heading => {
      heading.style.color = '#000000';
      heading.style.pageBreakAfter = 'avoid';
      heading.style.pageBreakInside = 'avoid';
      
      switch(heading.tagName.toLowerCase()) {
        case 'h1':
          heading.style.fontSize = '24pt';
          heading.style.fontWeight = '900';
          break;
        case 'h2':
          heading.style.fontSize = '20pt';
          heading.style.fontWeight = '800';
          break;
        case 'h3':
          heading.style.fontSize = '16pt';
          heading.style.fontWeight = '700';
          break;
        default:
          heading.style.fontWeight = 'bold';
      }
    });
    
    // Enhanced styling for citations to ensure they appear as badges
    const allCitationElements = element.querySelectorAll('.citation-badge, .citation-item, .citation-link, sup[data-footnote-ref], [data-testid*="citation"]');
    allCitationElements.forEach(cite => {
      cite.style.display = 'inline-block';
      cite.style.color = '#0055aa';
      cite.style.backgroundColor = '#f2f7ff';
      cite.style.border = '1px solid #d0e3ff';
      cite.style.borderRadius = '4px';
      cite.style.padding = '0px 4px';
      cite.style.margin = '0 2px';
      cite.style.fontSize = '0.8em';
      cite.style.verticalAlign = 'super';
      cite.style.lineHeight = '1.2';
      cite.style.whiteSpace = 'nowrap';
      cite.style.textDecoration = 'none';
      cite.style.fontWeight = 'normal';
    });
    
    // Fix citation containers
    const citationContainers = element.querySelectorAll('.relative.inline-flex.items-center, [data-citation-target]');
    citationContainers.forEach(container => {
      container.style.display = 'inline';
      container.style.whiteSpace = 'nowrap';
    });
    
    // Style paragraphs and text
    const paragraphs = element.querySelectorAll('p, li, td, th, div:not(.citation-item)');
    paragraphs.forEach(p => {
      p.style.color = '#000000';
    });
    
    // Handle tables specifically
    const tables = element.querySelectorAll('table');
    tables.forEach(table => {
      table.style.pageBreakInside = 'avoid';
      table.style.borderCollapse = 'collapse';
      table.style.width = '100%';
      
      const cells = table.querySelectorAll('td, th');
      cells.forEach(cell => {
        cell.style.border = '1px solid #dddddd';
        cell.style.padding = '8px';
        cell.style.color = '#000000';
      });
      
      const headers = table.querySelectorAll('th');
      headers.forEach(header => {
        header.style.backgroundColor = '#eeeeee';
        header.style.fontWeight = 'bold';
      });
    });
    
    // Improve code block formatting
    const codeBlocks = element.querySelectorAll('pre, code');
    codeBlocks.forEach(block => {
      block.style.fontFamily = 'Consolas, Monaco, monospace';
      block.style.backgroundColor = '#f5f5f5';
      block.style.padding = block.tagName.toLowerCase() === 'pre' ? '10px' : '2px 4px';
      block.style.borderRadius = '3px';
      block.style.border = '1px solid #eeeeee';
      
      if (block.tagName.toLowerCase() === 'pre') {
        block.style.whiteSpace = 'pre-wrap';
        block.style.overflowX = 'auto';
      }
    });
    
    // Make images responsive
    const images = element.querySelectorAll('img');
    images.forEach(img => {
      img.style.maxWidth = '100%';
      img.style.height = 'auto';
      img.style.pageBreakInside = 'avoid';
    });
  }
  
  // Initialize the extension
  if (document.readyState === 'loading') {
    document.addEventListener('DOMContentLoaded', init);
  } else {
    init();
  }
})();

================
File: manifest.json
================
{
  "manifest_version": 3,
  "name": "ChatGPT Research Report Exporter",
  "version": "1.0.0",
  "description": "Export ChatGPT research reports as clean, readable PDF files",

  "content_scripts": [
    {
      "matches": ["https://chatgpt.com/*"],
      "js": ["js/content.js"],
      "css": ["css/pdf-styles.css"]
    }
  ],
  "permissions": ["downloads"],
  "host_permissions": ["https://chatgpt.com/*"]
}



================================================================
End of Codebase
================================================================
